010000011    // mov_int i0 r3
010000011    // mov_int i0 r3
100100001    // movi 1
010011010    // mov_int i3 r2
010100010    // load_inc r0 r2
010101010    // load_inc r1 r2
010110010    // load_inc r2 r2
010111010    // load_inc r3 r2
100001011    // shf r2 1 1
000011010    // add r3 r2
100101000    // movi 8
010011001    // mov_int i3 r1
000101001    // and r1 r1 
100000111    // shf r1 1 1
100110100    // movi 20
010011001    // mov_int i3 r1
000001001    // add r1 r1
000001001    // add r1 r1
000111001    // and r3 r1
000111001    // and r3 r1
001101110    // mov r1 r6
000110110    // and r2 r6
101011110    // cmp_int i3 r6
110100100    // bne 4
101000010    // cmp_int i0 r2
110101011    // bne 11
010101010    // load_inc r1 r2
100111010    // movi 26
010011010    // mov_int i3 r2
100111001    // movi 25
010011001    // mov_int i3 r1
000010001    // add r2 r1
000010001    // add r2 r1
000010001    // add r2 r1
011101001    // xor r1 r1
100100001    // movi 1
010011001    // mov_int i3 r1
000001001    // add r1 r1
101000110    // cmp_int i0 r6
110100011    // bne 3
001111001    // mov i3 r1
101101010    // ba 10
100101111    // movi 15
010011001    // mov_int i3 r1
011101010    // xor r1 r2
010011001    // mov_int i3 r1
000001010    // add r1 r2
101000110    // cmp_int i0 r6
110100011    // bne 3
001111001    // mov i3 r1
101100010    // ba 2
010000001    // mov_int i0 r1
010011010    // mov_int i3 r2
000111010    // and r3 r2
101011010    // cmp_int i3 r2
110111001    // bne 25
100101111    // movi 15
010011010    // mov_int i3 r2
000111010    // and r3 r2
000010010    // add r2 r2
100111110    // movi 30
010011010    // mov_int i3 r2
100001011    // shf r2 1 1
000111110    // and r3 r6
100011010    // shf r6 1 0
001110011    // mov r2 r3
010011010    // mov_int i3 r2
100111110    // movi 30
010011010    // mov_int i3 r2
100001011    // shf r2 1 1
000111010    // and r3 r2
100001010    // shf r2 1 0
000010110    // add r2 r6
010011010    // mov_int i3 r2
000110011    // and r2 r3
000001110    // add r1 r6
010011010    // mov_int i3 r2
000110110    // and r2 r6
100001011    // shf r2 1 1
000010011    // add r2 r3
100011010    // shf r6 1 0
000010011    // add r2 r3
100101000    // movi 8
010011010    // mov_int i3 r2
000110010    // and r2 r2
100001000    // shf r2 0 0
100001000    // shf r2 0 0
100001000    // shf r2 0 0
100001001    // shf r2 0 1
100000101    // shf r1 0 1
000010001    // add r2 r1
001101000    // mov 8
010011010    // mov_int i3 r2
000110001    // and r2 r1
000110010    // and r2 r2
100001100    // shf r3 0 0
1101-0110    // bne -6
110100100    // bne 4
001111001    // mov 25
010011010    // mov_int i3 r2
011110011    // xor r2 r3
011110011    // xor r2 r3
001100001    // mov 1
010011010    // mov_int i3 r2
100101111    // movi 15
010011110    // mov_int i3 r6
000111110    // and r3 r6
000010110    // add r2 r6
100111110    // movi 30
010011010    // mov_int i3 r2
100001011    // shf r2 1 1
000111010    // and r3 r2
100001010    // shf r2 1 0
001111110    // mov r3 r6
100111110    // movi 30
010011110    // mov_int i3 r6
100011011    // shf r6 1 1
000111110    // and r3 r6
100011000    // shf r6 0 0
000010010    // add r2 r2
100101111    // movi 15
010011110    // mov_int i3 r6
000110011    // and r2 r3
001101111    // mov 15
010011110    // mov_int i3 r6
000110010    // and r2 r2
100001011    // shf r2 1 1
000010011    // add r2 r3
100001010    // shf r2 1 0
000010011    // add r2 r3
001111001    // mov r3 r1
001111010    // mov r3 r2
100100101    // movi 5
010011011    // mov_int i3 r3
100100101    // movi 5
010011001    // mov_int i3 r1
011001011    // st r1 r3
011010001    // st r2 r1
